const fs = require('fs-extra');
const ps = require('path');
const { buildEngine } = require('@cocos/ccbuild');

const engineRoot = ps.resolve(__dirname, '..', '..');
console.log(`Engine root: ${engineRoot}`);

const exportsDir = ps.join(engineRoot, 'exports');
const files = fs.readdirSync(exportsDir);
const features = [];
files.forEach(file => {
    const filePath = ps.join(exportsDir, file);
    const feature = ps.parse(ps.basename(filePath)).name;
    if (feature !== 'vendor-google') {
        features.push(feature);
    }
});

console.log(`features: [ ${features.join(', ')} ]`);

const mangleProperties = {
    mangleList: [
        'SpriteFrame._rect',
        'SpriteFrame._trimmedBorder',
        'SpriteFrame._offset',
        'SpriteFrame._originalSize',
        'SpriteFrame._rotated',
        'SpriteFrame._capInsets',
        'SpriteFrame._atlasUuid',
        'SpriteFrame._texture',
        'SpriteFrame._isFlipUVY',
        'SpriteFrame._isFlipUVX',
        'SpriteFrame._original',
        'SpriteFrame._packable',
        'SpriteFrame._pixelsToUnit',
        'SpriteFrame._pivot',
        'SpriteFrame._meshType',
        'SpriteFrame._extrude',
        'SpriteFrame._customOutLine',
        'SpriteFrame._mesh',
        'SpriteFrame._minPos',
        'SpriteFrame._maxPos',
        'SpriteFrame._refreshTexture',
        'SpriteFrame._initVertices',
        'SpriteFrame._updateMeshVertices',
        'SpriteFrame._createMesh',
        'SpriteFrame._updateMesh',

        'Pass._rootBuffer',
        'Pass._buffers',
        'Pass._descriptorSet',
        'Pass._pipelineLayout',
        'Pass._passIndex',
        'Pass._propertyIndex',
        'Pass._programName',
        'Pass._dynamics',
        'Pass._propertyHandleMap',
        'Pass._rootBlock',
        'Pass._blocksInt',
        'Pass._blocks',
        'Pass._shaderInfo',
        'Pass._defines',
        'Pass._properties',
        'Pass._shader',
        'Pass._bs',
        'Pass._dss',
        'Pass._rs',
        'Pass._priority',
        'Pass._stage',
        'Pass._phase',
        'Pass._passID',
        'Pass._subpassID',
        'Pass._phaseID',
        'Pass._primitive',
        'Pass._batchingScheme',
        'Pass._dynamicStates',
        'Pass._instancedBuffers',
        'Pass._hash',
        'Pass._root',
        'Pass._device',
        'Pass._rootBufferDirty',
        'Pass._doInit',
        'Pass._syncBatchingScheme',
        'PassInstance._onStateChange',

        'RenderWindow._title',
        'RenderWindow._width',
        'RenderWindow._height',
        'RenderWindow._swapchain',
        'RenderWindow._renderPass',
        'RenderWindow._colorTextures',
        'RenderWindow._depthStencilTexture',
        'RenderWindow._cameras',
        'RenderWindow._hasOnScreenAttachments',
        'RenderWindow._hasOffScreenAttachments',
        'RenderWindow._framebuffer',
        'RenderWindow._device',
        'RenderWindow._renderWindowId',
        'RenderWindow._isResized',
        'RenderWindow._colorName',
        'RenderWindow._depthStencilName',

        'ProgramLib._templates',
        'ProgramLib._cache',
        'ProgramLib._templateInfos',

        'TextureBase._width',
        'TextureBase._height',
        'TextureBase._getGFXDevice',
        'TextureBase._getGFXFormat',
        'TextureBase._setGFXFormat',
        'TextureBase._getGFXPixelFormat',

        'SimpleTexture._gfxTexture',
        'SimpleTexture._gfxTextureView',
        'SimpleTexture._baseLevel',
        'SimpleTexture._maxLevel',
        'SimpleTexture._assignImage',
        'SimpleTexture._checkTextureLoaded',
        'SimpleTexture._textureReady',
        'SimpleTexture._setMipmapLevel',
        'SimpleTexture._setMipRange',
        'SimpleTexture._getGfxTextureCreateInfo',
        'SimpleTexture._getGfxTextureViewCreateInfo',
        'SimpleTexture._tryReset',
        'SimpleTexture._createTexture',
        'SimpleTexture._createTextureView',
        'SimpleTexture._tryDestroyTexture',
        'SimpleTexture._tryDestroyTextureView',

        'TextureCube._uploadAtlas',

        'Material._passes',
        'Material._hash',
        'Material._fillInfo',
        'Material._prepareInfo',
        'Material._createPasses',
        'Material._update',
        'Material._uploadProperty',
        'Material._bindTexture',
        'Material._doDestroy',

        'RenderTexture._initWindow',

        'BuiltinResMgr._resources',
        'BuiltinResMgr._materialsToBeCompiled',

        'Label._N$file',
        'Label._texture',
        'Label._ttfSpriteFrame',
        'Label._userDefinedFont',
        'Label._assemblerData',
        'Label._fontAtlas',
        'Label._letterTexture',
        'Label._contentWidth',
        'Label._textStyle',
        'Label._textLayout',
        'Label._textRenderData',
        'Label._textLayoutData',
        'Label.changeMaterialForDefine',

        'RichText._textArray',
        'RichText._segments',
        'RichText._labelSegmentsCache',
        'RichText._linesWidth',
        'RichText._lineCount',
        'RichText._labelWidth',
        'RichText._labelHeight',
        'RichText._layoutDirty',
        'RichText._lineOffsetX',
        'RichText._updateRichTextStatus',
        'RichText._labelChildrenNum',
        'RichText._addEventListeners',
        'RichText._removeEventListeners',
        'RichText._updateLabelSegmentTextAttributes',
        'RichText._createFontLabel',
        'RichText._createImage',
        'RichText._onTTFLoaded',
        'RichText.splitLongStringApproximatelyIn2048',
        'RichText.splitLongStringOver2048',
        'RichText._measureText',
        'RichText._calculateSize',
        'RichText._onTouchEnded',
        'RichText._containsTouchLocation',
        'RichText._resetState',
        'RichText._activateChildren',
        'RichText._addLabelSegment',
        'RichText._updateRichTextWithMaxWidth',
        'RichText._updateLineInfo',
        'RichText._needsUpdateTextLayout',
        'RichText._addRichTextImageElement',
        'RichText._updateTextDefaultColor',
        'RichText._updateRichText',
        'RichText._getFirstWordLen',
        'RichText._convertLiteralColorValue',
        'RichText._applyTextAttribute',
        'RichText._applyLayer',
        'RichText._resetLabelState',

        'UIRenderer._renderData',
        'UIRenderer._stencilStage',
        'UIRenderer._assembler',
        'UIRenderer._postAssembler',
        'UIRenderer._renderDataFlag',
        'UIRenderer._renderFlag',
        'UIRenderer._renderEntity',
        'UIRenderer._instanceMaterialType',
        'UIRenderer._srcBlendFactorCache',
        'UIRenderer._dstBlendFactorCache',
        'UIRenderer._useVertexOpacity',
        'UIRenderer._render',
        'UIRenderer._postRender',
        'UIRenderer._canRender',
        'UIRenderer._postCanRender',
        'UIRenderer._updateColor',
        'UIRenderer._nodeStateChange',
        'UIRenderer._colorDirty',
        'UIRenderer._onMaterialModified',
        'UIRenderer._updateBuiltinMaterial',
        'UIRenderer._flushAssembler',
        'UIRenderer.createRenderEntity',

        'UITransform._priority',
        'UITransform._selfBoundingBox',
        'UITransform._parentChanged',

        'Canvas._thisOnCameraResized',
        'Canvas._onResizeCamera',

        'MeshBuffer._byteOffset',
        'MeshBuffer._vertexOffset',
        'MeshBuffer._indexOffset',
        'MeshBuffer._dirty',
        'MeshBuffer._floatsPerVertex',
        'MeshBuffer._vData',
        'MeshBuffer._iData',
        'MeshBuffer._byteOffset',

        'BaseRenderData._renderDrawInfo',
        'BaseRenderData._material',
        'BaseRenderData._dataHash',
        'BaseRenderData._floatStride',
        'BaseRenderData._vertexFormat',
        'BaseRenderData._drawInfoType',
        'BaseRenderData._multiOwner',
        'BaseRenderData._renderDrawInfo',
        'BaseRenderData._batcher',
        'BaseRenderData.setRenderDrawInfoAttributes',
        
        'RenderData._textureHash',
        'RenderData._accessor',
        'RenderData.syncRender2dBuffer',
        
        'MeshRenderData._initIAInfo',
        'MeshRenderData._reallocBuffer',

        'RenderDrawInfo._accId',
        'RenderDrawInfo._bufferId',
        'RenderDrawInfo._vertexOffset',
        'RenderDrawInfo._indexOffset',
        'RenderDrawInfo._vb',
        'RenderDrawInfo._ib',
        'RenderDrawInfo._vData',
        'RenderDrawInfo._iData',
        'RenderDrawInfo._vertDirty',
        'RenderDrawInfo._vbCount',
        'RenderDrawInfo._ibCount',
        'RenderDrawInfo._dataHash',
        'RenderDrawInfo._isMeshBuffer',
        'RenderDrawInfo._material',
        'RenderDrawInfo._texture',
        'RenderDrawInfo._sampler',
        'RenderDrawInfo._stride',
        'RenderDrawInfo._useLocal',
        'RenderDrawInfo._model',
        'RenderDrawInfo._drawInfoType',
        'RenderDrawInfo._subNode',
        'RenderDrawInfo._nativeObj',
        'RenderDrawInfo._uint8SharedBuffer',
        'RenderDrawInfo._uint16SharedBuffer',
        'RenderDrawInfo._uint32SharedBuffer',

        'RenderEntity._node',
        'RenderEntity._renderTransform',
        'RenderEntity._stencilStage',
        'RenderEntity._useLocal',
        'RenderEntity._maskMode',
        'RenderEntity._floatSharedBuffer',
        'RenderEntity._uint8SharedBuffer',
        'RenderEntity._boolSharedBuffer',
        'RenderEntity._color',
        'RenderEntity._localOpacity',
        'RenderEntity._colorDirty',
        'RenderEntity._enabled',

        'Node._scene',
        'Node._activeInHierarchy',
        'Node._eventProcessor',
        'Node._eventMask',
        'Node._siblingIndex',
        'Node._eventProcessor',
        'Node._updateScene',
        'Node._onHierarchyChangedBase',
        'Node._onPreDestroyBase',
        'Node._onSiblingIndexChanged',
        'Node._checkMultipleComp',
        'Node._transformFlags',
        'Node._eulerDirty',
        'Node._flagChangeVersion',
        'Node._hasChangedFlags',
        'Node._onPreDestroy',
        'Node._onHierarchyChanged',

        'Scene._renderScene',
        'Scene._inited',
        'Scene._prefabSyncedInLiveReload',
    ],
};

(async () => {
    const outDir = ps.join(engineRoot, 'build-cc-out');

    const options = {
        engine: engineRoot,
        out: outDir,
        platform: "WECHAT",
        moduleFormat: "system",
        compress: true,
        split: false,
        nativeCodeBundleMode: "wasm",
        assetURLFormat: "runtime-resolved",
        noDeprecatedFeatures: true,
        sourceMap: false,
        features,
        loose: true,
        mode: "BUILD",
        flags: {
            DEBUG: false,
            NET_MODE: 0,
            SERVER_MODE: false
        },
        wasmCompressionMode: 'brotli',
        inlineEnum: true,
        mangleProperties,
    };

    await fs.ensureDir(outDir);
    await fs.emptyDir(outDir);

    await buildEngine(options);
})();
